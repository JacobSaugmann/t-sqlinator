const { TSqlinatorFormatter } = require('../out/tSqlinatorFormatter');

console.log('üß™ Testing T-SQLinator Configuration Options...\n');

// Test different formatting styles
const testSql = `SELECT emp.name, emp.salary, dept.department_name FROM employees emp INNER JOIN departments dept ON emp.dept_id = dept.id WHERE emp.salary > 50000 ORDER BY emp.salary DESC`;

console.log('Original SQL:');
console.log('‚îÄ'.repeat(80));
console.log(testSql);
console.log('');

// Test 1: River Formatting (default)
console.log('üåä River Formatting (useRiverFormatting: true, riverColumn: 7):');
console.log('‚îÄ'.repeat(80));
const riverFormatter = new TSqlinatorFormatter({
    useRiverFormatting: true,
    riverColumn: 7,
    useIndentFormatting: false
});
console.log(riverFormatter.format(testSql));
console.log('');

// Test 2: Indent Formatting
console.log('üìè Indent Formatting (useIndentFormatting: true):');
console.log('‚îÄ'.repeat(80));
const indentFormatter = new TSqlinatorFormatter({
    useRiverFormatting: false,
    useIndentFormatting: true,
    indentSize: 4
});
console.log(indentFormatter.format(testSql));
console.log('');

// Test 3: Custom River Column
console.log('üåä Custom River Column (riverColumn: 10):');
console.log('‚îÄ'.repeat(80));
const customRiverFormatter = new TSqlinatorFormatter({
    useRiverFormatting: true,
    riverColumn: 10,
    useIndentFormatting: false
});
console.log(customRiverFormatter.format(testSql));
console.log('');

// Test 4: Different comma positions
console.log('üìù Comma After (commaPosition: "after"):');
console.log('‚îÄ'.repeat(80));
const commaAfterFormatter = new TSqlinatorFormatter({
    commaPosition: 'after',
    useRiverFormatting: true,
    riverColumn: 7
});
console.log(commaAfterFormatter.format(testSql));
console.log('');

console.log('‚úÖ All formatting styles tested!');
console.log('\nüìã Available Configuration Options:');
console.log('  ‚Ä¢ useRiverFormatting: Enable/disable river formatting');
console.log('  ‚Ä¢ riverColumn: Column position for river alignment (1-20)');
console.log('  ‚Ä¢ useIndentFormatting: Use traditional indentation instead');
console.log('  ‚Ä¢ keywordCase: upper/lower/preserve');
console.log('  ‚Ä¢ functionCase: upper/lower/preserve');
console.log('  ‚Ä¢ dataTypeCase: upper/lower/preserve');
console.log('  ‚Ä¢ commaPosition: before/after');
console.log('  ‚Ä¢ alignCommas: true/false');
console.log('  ‚Ä¢ alignAliases: true/false');
console.log('  ‚Ä¢ newlineAfterSelect: true/false');
console.log('  ‚Ä¢ newlineBeforeFrom: true/false');
console.log('  ‚Ä¢ newlineBeforeWhere: true/false');
console.log('  ‚Ä¢ newlineBeforeGroupBy: true/false');
console.log('  ‚Ä¢ newlineBeforeOrderBy: true/false');
console.log('  ‚Ä¢ indentSize: 1-8 spaces');
console.log('  ‚Ä¢ linesBetweenQueries: 0-5 blank lines');
console.log('\nüéâ All options should now be available in VS Code Settings UI!');